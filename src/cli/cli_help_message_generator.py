class CLIHelpMessageGenerator:
    def generate(self):
        return (
            "📌 **Commands and Arguments**\n\n"
            "🔹 **scrape_upcoming** - Scrape odds and event details for upcoming matches.\n"
            "   --sport                     🏆 The sport to scrape (default: football).\n"
            "   --date                      📅 Date for upcoming matches (format: YYYYMMDD). "
            "If a league is specified, this is ignored.\n"
            "   --all                       🌐 Scrape all 23 supported sports with a single command. "
            "Overrides --sport argument. Uses today's date if --date not provided.\n"
            "   --leagues                   ⚽ Specific leagues to target (comma-separated, "
            "e.g., england-premier-league,spain-primera-division). Overrides sport and date.\n"
            "   --markets                   💰 Betting markets to scrape (comma-separated, e.g., 1x2, btts).\n"
            "   --storage                   💾 Storage type (local or remote; default: local).\n"
            "   --file_path                 📂 File path for saving data locally (default: scraped_data.json).\n"
            "   --format                    📝 Data storage format (json or csv; default: json).\n"
            "   --proxies                   🌐 List of proxies ('server user pass' format). "
            "Supports multiple proxies.\n"
            "   --headless                  🕶️ Run browser in headless mode (default: False).\n"
            "   --save_logs                 📜 Save logs for debugging (default: False).\n"
            "   --browser_user_agent        🔍 Custom user agent string for browser requests (optional).\n"
            "   --browser_locale_timezone   🌍 Browser locale timezone (e.g., fr-BE) (optional).\n"
            "   --browser_timezone_id       ⏰ Browser timezone ID (e.g., Europe/Brussels) (optional).\n"
            "   --match_links               🔗 Scrape specific match pages (comma-separated links, "
            "overrides other filters).\n"
            "   --target_bookmaker           🎯 Filter scraping for a specific bookmaker (e.g., Betclic.fr).\n"
            "   --scrape_odds_history        📈 Include odds movement history by hovering modals (default: False).\n"
            "   --odds_format                💰 Odds format to display (default: Decimal Odds).\n"
            "   --concurrency_tasks          ⚡ Number of concurrent tasks for scraping (default: 3).\n\n"
            "🔹 **scrape_historic** - Scrape historical odds and match results.\n"
            "   --sport                     🏆 The sport to scrape (default: football).\n"
            "   --all                       🌐 Scrape all 23 supported sports with a single command for the specified season. "
            "Overrides --sport argument.\n"
            "   --leagues                   ⚽ The leagues to scrape (comma-separated, "
            "e.g., england-premier-league,spain-primera-division).\n"
            "   --season                    📅 Season to scrape (format: YYYY, YYYY-YYYY, e.g., 2023 or 2022-2023).\n"
            "   --markets                   💰 Betting markets to scrape (comma-separated, e.g., 1x2, btts).\n"
            "   --storage                   💾 Storage type (local or remote; default: local).\n"
            "   --file_path                 📂 File path for saving data locally (default: scraped_data.json).\n"
            "   --format                    📝 Data storage format (json or csv; default: json).\n"
            "   --max_pages                 📑 Maximum number of pages to scrape (optional).\n"
            "   --proxies                   🌐 List of proxies ('server user pass' format). "
            "Supports multiple proxies.\n"
            "   --headless                  🕶️ Run browser in headless mode (default: False).\n"
            "   --save_logs                 📜 Save logs for debugging (default: False).\n"
            "   --browser_user_agent        🔍 Custom user agent string for browser requests (optional).\n"
            "   --browser_locale_timezone   🌍 Browser locale timezone (e.g., fr-BE) (optional).\n"
            "   --browser_timezone_id       ⏰ Browser timezone ID (e.g., Europe/Brussels) (optional).\n"
            "   --match_links               🔗 Scrape specific match pages (comma-separated links, "
            "overrides other filters).\n"
            "   --target_bookmaker           🎯 Filter scraping for a specific bookmaker (e.g., Betclic.fr).\n"
            "   --scrape_odds_history        📈 Include odds movement history by hovering modals (default: False).\n"
            "   --odds_format                💰 Odds format to display (default: Decimal Odds).\n"
            "   --concurrency_tasks          ⚡ Number of concurrent tasks for scraping (default: 3).\n\n"
            "📌 **Examples:**\n"
            "✅ **Scrape upcoming football matches for a specific date:**\n"
            "   `python main.py scrape_upcoming --sport football --date 20250101 --markets 1x2,btts,dnb "
            "--storage local --file_path output.json`\n\n"
            "✅ **Scrape all upcoming matches for a league (ignoring date argument):**\n"
            "   `python main.py scrape_upcoming --leagues england-premier-league --markets 1x2`\n\n"
            "✅ **Scrape upcoming matches for multiple leagues:**\n"
            "   `python main.py scrape_upcoming --leagues england-premier-league,spain-primera-division "
            "--markets 1x2`\n\n"
            "✅ **Scrape historical odds for the Premier League (2022-2023 season):**\n"
            "   `python main.py scrape_historic --sport football --leagues england-premier-league "
            "--season 2022-2023 --markets 1x2 --storage remote --headless`\n\n"
            "✅ **Scrape historical odds for multiple leagues:**\n"
            "   `python main.py scrape_historic --sport football --leagues england-premier-league,"
            "spain-primera-division --season 2022-2023 --markets 1x2`\n\n"
            "✅ **Scrape all upcoming odds across all sports for today:**\n"
            "   `python main.py scrape_upcoming --all --markets 1x2,btts --storage local`\n\n"
            "✅ **Scrape all upcoming odds across all sports for a specific date:**\n"
            "   `python main.py scrape_upcoming --all --date 20250101 --markets 1x2 --file_path all_sports_20250101.json`\n\n"
            "✅ **Scrape all historical odds across all sports for a specific season:**\n"
            "   `python main.py scrape_historic --all --season 2023 --markets 1x2 --headless`\n\n"
            "✅ **Scrape specific match pages (Overrides sport, league, and date filters):**\n"
            "   `python main.py scrape_upcoming --match_links "
            "'https://www.oddsportal.com/football/england/premier-league/leicester-brentford-xQ77QTN0/#1X2;2'`\n\n"
            "💡 **Note:**\n"
            "- If both **date** and **leagues** are provided for `scrape_upcoming`, the scraper will ignore "
            "the date and scrape all upcoming matches for those leagues.\n"
            "- Ensure the proxy's **region matches** the `BROWSER_LOCALE_TIMEZONE` and `BROWSER_TIMEZONE_ID` "
            "settings for best results.\n"
        )
